'text' | 'binary';
export const parseComplete = {
    name: MessageName.parseComplete,
    length: 5,
};
export const bindComplete = {
    name: MessageName.bindComplete,
    length: 5,
};
export const closeComplete = {
    name: MessageName.closeComplete,
    length: 5,
};
export const noData = {
    name: MessageName.noData,
    length: 5,
};
export const portalSuspended = {
    name: MessageName.portalSuspended,
    length: 5,
};
export const replicationStart = {
    name: MessageName.replicationStart,
    length: 4,
};
export const emptyQuery = {
    name: MessageName.emptyQuery,
    length: 4,
};
export const copyDone = {
    name: MessageName.copyDone,
    length: 4,
};
export class DatabaseError extends Error {
    constructor(message, readonly = length, number, readonly = name, MessageName) {
        super(message);
        this.readonly = readonly;
        this.readonly = readonly;
    }
}
export class CopyDataMessage {
    constructor(readonly = length, number, readonly = chunk, Buffer) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name = MessageName.copyData;
    }
}
export class CopyResponse {
    constructor(readonly = length, number, readonly = name, MessageName, readonly = binary, boolean, columnCount) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = columnTypes;
        this.number = [];
        this.columnTypes = new Array(columnCount);
    }
}
export class Field {
    constructor(readonly = name, string, readonly = tableID, number, readonly = columnID, number, readonly = dataTypeID, number, readonly = dataTypeSize, number, readonly = dataTypeModifier, number, readonly = format, Mode) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
    }
}
export class RowDescriptionMessage {
    constructor(readonly = length, number, readonly = fieldCount, number) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.rowDescription;
        this.readonly = fields;
        this.Field = [];
        this.fields = new Array(this.fieldCount);
    }
}
export class ParameterStatusMessage {
    constructor(readonly = length, number, readonly = parameterName, string, readonly = parameterValue, string) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.parameterStatus;
    }
}
export class AuthenticationMD5Password {
    constructor(readonly = length, number, readonly = salt, Buffer) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.authenticationMD5Password;
    }
}
export class BackendKeyDataMessage {
    constructor(readonly = length, number, readonly = processID, number, readonly = secretKey, number) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.backendKeyData;
    }
}
export class NotificationResponseMessage {
    constructor(readonly = length, number, readonly = processId, number, readonly = channel, string, readonly = payload, string) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.notification;
    }
}
export class ReadyForQueryMessage {
    constructor(readonly = length, number, readonly = status, string) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.readyForQuery;
    }
}
export class CommandCompleteMessage {
    constructor(readonly = length, number, readonly = text, string) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name;
        this.MessageName = MessageName.commandComplete;
    }
}
export class DataRowMessage {
    constructor(length, fields) {
        this.length = length;
        this.fields = fields;
        this.readonly = fieldCount;
        this.readonly = name;
        this.MessageName = MessageName.dataRow;
        this.fieldCount = fields.length;
    }
}
export class NoticeMessage {
    constructor(readonly = length, number, readonly = message, string =  | undefined) {
        this.readonly = readonly;
        this.readonly = readonly;
        this.readonly = name = MessageName.notice;
    }
}
//# sourceMappingURL=messages.js.map